import os
import io
import json
import random
import uuid
import requests
import telebot
from telebot import types
from telebot.types import InlineQueryResultArticle, InputTextMessageContent

# ========== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ==========
BOT_TOKEN = '7882534527:AAG0OD69Waw33ENGQgNENs-HJu7ayECto4o'
ADMIN_ID = 1276928573
DEFAULT_USERNAME = 'hi77x'
DB_FILE = 'db.json'

bot = telebot.TeleBot(BOT_TOKEN)

# ========== –ó–∞–≥—Ä—É–∑–∫–∞ / —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ë–î ==========
if not os.path.exists(DB_FILE):
    with open(DB_FILE, 'w', encoding='utf-8') as f:
        json.dump({
            "permitted_users": [],      # —Å–ø–∏—Å–æ–∫ user_id
            "admin_contact": ADMIN_ID   # –∫–æ–Ω—Ç–∞–∫—Ç –∞–¥–º–∏–Ω–∞
        }, f, ensure_ascii=False, indent=2)

with open(DB_FILE, 'r', encoding='utf-8') as f:
    db = json.load(f)


def save_db():
    with open(DB_FILE, 'w', encoding='utf-8') as f:
        json.dump(db, f, ensure_ascii=False, indent=2)

# ========== HTTP-–∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏ API-—Ñ—É–Ω–∫—Ü–∏–∏ ==========
COMMON_HEADERS = {
    "accept": "application/json, text/plain, */*",
    "accept-language": "ru,en;q=0.9",
    "content-type": "application/json",
    "origin": "https://split.tg",
    "priority": "u=1, i",
    "referer": "https://split.tg/",
    "sec-ch-ua": "\"Not A(Brand\";v=\"8\", \"Chromium\";v=\"132\", \"YaBrowser\";v=\"25.2\", \"Yowser\";v=\"2.5\"",
    "sec-ch-ua-mobile": "?0",
    "sec-ch-ua-platform": "\"Windows\"",
    "sec-fetch-dest": "empty",
    "sec-fetch-mode": "cors",
    "sec-fetch-site": "same-site",
    "user-agent": (
        "Mozilla/5.0 (Windows NT 10.0; Win64; x64) "
        "AppleWebKit/537.36 (KHTML, like Gecko) "
        "Chrome/132.0.0.0 YaBrowser/25.2.0.0 Safari/537.36"
    )
}

def get_invoice(quantity: int, username: str):
    url = "https://api.split.tg/buy/stars"
    payload = {"username": username, "payment_method": "wata_sbp", "quantity": quantity}
    try:
        r = requests.post(url, json=payload, headers=COMMON_HEADERS, timeout=10)
        r.raise_for_status()
        return r.json()
    except Exception as e:
        return None


def get_recipient_info(username: str):
    url = "https://api.split.tg/recipients/stars"
    payload = {"username": username}
    try:
        r = requests.post(url, json=payload, headers=COMMON_HEADERS, timeout=10)
        r.raise_for_status()
        return r.json()
    except Exception as e:
        return None

# ========== –°–æ—Å—Ç–æ—è–Ω–∏—è –∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã ==========
user_modes    = {}   # chat_id -> "calc" –∏–ª–∏ "purchase"
admin_state   = {}   # ADMIN_ID -> —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
admin_page    = {}   # ADMIN_ID -> —Ç–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–ø–∏—Å–∫–∞
PAGE_SIZE     = 5
MIN_QTY       = 50
MAX_QTY       = 15000

# ========== –£—Ç–∏–ª–∏—Ç—ã –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã ==========
def is_permitted(cid):
    # –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –≤—Å–µ–≥–¥–∞ –∏–º–µ–µ—Ç –ø–æ–ª–Ω—ã–µ –ø—Ä–∞–≤–∞
    return cid == ADMIN_ID or cid in db["permitted_users"]


def get_change_markup(cid):
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞, –≤ —Ç–æ–º —á–∏—Å–ª–µ –∞–¥–º–∏–Ω, –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É –¥–ª—è —Å–º–µ–Ω—ã —Ä–µ–∂–∏–º–∞
    if is_permitted(cid):
        kb = types.InlineKeyboardMarkup()
        kb.add(types.InlineKeyboardButton("–°–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º", callback_data="change_mode"))
        return kb
    return None


def send_mode_selection_menu(chat_id):
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton("–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ü–µ–Ω—É", callback_data="mode_calc"))
    if is_permitted(chat_id):
        kb.add(types.InlineKeyboardButton("–û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–∫—É–ø–∫—É", callback_data="mode_purchase"))
    bot.send_message(
        chat_id,
        "üëã <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:</b>\n"
        f"‚Ä¢ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ü–µ–Ω—É (–≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç {MIN_QTY} –¥–æ {MAX_QTY}).\n"
        + ("‚Ä¢ –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–∫—É–ø–∫—É (–¥–æ—Å—Ç—É–ø–Ω–æ –≤–∞–º).\n" if is_permitted(chat_id) else ""),
        parse_mode='HTML',
        reply_markup=kb
    )


def send_admin_menu(chat_id):
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row("–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", "–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    kb.row("–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", "–°–º–µ–Ω–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç")
    kb.row("–í—ã—Ö–æ–¥")
    bot.send_message(
        chat_id,
        "<b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>",
        parse_mode='HTML',
        reply_markup=kb
    )


def send_list_page(chat_id, edit=False, message_id=None):
    users = db["permitted_users"]
    total = len(users)
    page = admin_page.get(chat_id, 0)
    start = page * PAGE_SIZE
    end   = start + PAGE_SIZE
    subset = users[start:end]

    text = "<b>–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n"
    for idx, uid in enumerate(subset, start=1+start):
        try:
            chat = bot.get_chat(uid)
            name = chat.first_name or "‚Äî"
        except:
            name = "‚Äî"
        text += f"{idx}. <a href=\"tg://user?id={uid}\">{name}</a> (ID: {uid})\n"

    kb = types.InlineKeyboardMarkup()
    nav = []
    if page > 0:
        nav.append(types.InlineKeyboardButton("‚¨ÖÔ∏è", callback_data="prev_page"))
    if end < total:
        nav.append(types.InlineKeyboardButton("‚û°Ô∏è", callback_data="next_page"))
    if nav:
        kb.row(*nav)
    kb.row(
        types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_admin"),
        types.InlineKeyboardButton("–í—ã—Ö–æ–¥", callback_data="exit_admin")
    )

    if edit:
        bot.edit_message_text(text, chat_id, message_id, parse_mode='HTML', reply_markup=kb)
    else:
        bot.send_message(chat_id, text, parse_mode='HTML', reply_markup=kb)


# ========== –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ==========
@bot.message_handler(commands=['start'])
def cmd_start(msg):
    user_modes.pop(msg.chat.id, None)
    send_mode_selection_menu(msg.chat.id)


@bot.message_handler(commands=['admin'])
def cmd_admin(msg):
    cid = msg.chat.id
    if cid != ADMIN_ID:
        kb = types.InlineKeyboardMarkup()
        contact = db.get("admin_contact", ADMIN_ID)
        kb.add(types.InlineKeyboardButton(
            "–°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º",
            url=f"tg://user?id={contact}"
        ))
        bot.send_message(
            cid,
            "‚ùó <b>–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.</b>\n"
            "–î–ª—è —Å–≤—è–∑–∏ —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
            parse_mode='HTML',
            reply_markup=kb
        )
        return
    admin_state[cid] = 'menu'
    send_admin_menu(cid)


# ========== –û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline-–∫–Ω–æ–ø–æ–∫ ==========
@bot.callback_query_handler(func=lambda c: c.data in (
    "mode_calc","mode_purchase","change_mode","cancel_change","confirm_purchase",
    "prev_page","next_page","back_admin","exit_admin"
))
def callback_inline(c):
    cid = c.message.chat.id
    data = c.data

    # –†–µ–∂–∏–º—ã
    if data == "mode_calc":
        user_modes[cid] = "calc"
        # –î–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ñ–æ—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º edit_message_caption
        if c.message.content_type == 'photo':
            bot.edit_message_caption(
                "‚úÖ <b>–†–µ–∂–∏–º: –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ü–µ–Ω—É</b>\n"
                f"–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç {MIN_QTY} –¥–æ {MAX_QTY}.",
                cid, c.message.message_id,
                reply_markup=get_change_markup(cid),
                parse_mode='HTML'
            )
        else:
            bot.edit_message_text(
                "‚úÖ <b>–†–µ–∂–∏–º: –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ü–µ–Ω—É</b>\n"
                f"–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç {MIN_QTY} –¥–æ {MAX_QTY}.",
                cid, c.message.message_id, parse_mode='HTML',
                reply_markup=get_change_markup(cid)
            )

    elif data == "mode_purchase" and is_permitted(cid):
        user_modes[cid] = "purchase"
        if c.message.content_type == 'photo':
            bot.edit_message_caption(
                "‚úÖ <b>–†–µ–∂–∏–º: –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–∫—É–ø–∫—É</b>\n"
                f"–í–≤–µ–¥–∏—Ç–µ: <code>username –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ</code> ({MIN_QTY}‚Äì{MAX_QTY}).",
                cid, c.message.message_id,
                reply_markup=get_change_markup(cid),
                parse_mode='HTML'
            )
        else:
            bot.edit_message_text(
                "‚úÖ <b>–†–µ–∂–∏–º: –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–∫—É–ø–∫—É</b>\n"
                f"–í–≤–µ–¥–∏—Ç–µ: <code>username –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ</code> ({MIN_QTY}‚Äì{MAX_QTY}).",
                cid, c.message.message_id, parse_mode='HTML',
                reply_markup=get_change_markup(cid)
            )

    # –°–º–µ–Ω–∞ —Ä–µ–∂–∏–º–∞: –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–π —á–∞—Å—Ç–∏
    elif data == "change_mode" and is_permitted(cid):
        kb = types.InlineKeyboardMarkup()
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–∏–µ –∫–Ω–æ–ø–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å, –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–∂–∏–º–∞
        if user_modes.get(cid) == "calc":
            # –µ—Å–ª–∏ —Ç–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º - —Ä–∞—Å—á–µ—Ç —Ü–µ–Ω—ã, —Ç–æ –ø—Ä–µ–¥–ª–æ–∂–∏–º –æ—Ç–º–µ–Ω—É –∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏
            kb.add(
                types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel_change"),
                types.InlineKeyboardButton("–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ", callback_data="confirm_purchase")
            )
        elif user_modes.get(cid) == "purchase":
            # –µ—Å–ª–∏ —Ç–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º - –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏, —Ç–æ –ø—Ä–µ–¥–ª–æ–∂–∏–º –æ—Ç–º–µ–Ω—É –∏ —Ä–∞—Å—á–µ—Ç —Ü–µ–Ω—ã
            kb.add(
                types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel_change"),
                types.InlineKeyboardButton("–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ü–µ–Ω—É", callback_data="mode_calc")
            )
        else:
            # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ —Ä–µ–∂–∏–º –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–µ–¥–ª–æ–∂–∏–º –æ–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞
            kb.add(
                types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel_change"),
                types.InlineKeyboardButton("–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ", callback_data="confirm_purchase")
            )

        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å —Ñ–æ—Ç–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –ø–æ–∫—É–ø–∫–∏), –∏—Å–ø–æ–ª—å–∑—É–µ–º edit_message_caption
        if c.message.content_type == 'photo':
            bot.edit_message_caption(
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", cid, c.message.message_id, reply_markup=kb
            )
        else:
            bot.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", cid, c.message.message_id, reply_markup=kb)

    elif data == "cancel_change":
        bot.edit_message_reply_markup(cid, c.message.message_id, reply_markup=None)
        bot.send_message(
            cid, "‚ùó <b>–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ —Å–º–µ–Ω—É —Ä–µ–∂–∏–º–∞.</b>",
            parse_mode='HTML',
            reply_markup=get_change_markup(cid)
        )

    elif data == "confirm_purchase" and is_permitted(cid):
        user_modes[cid] = "purchase"
        if c.message.content_type == 'photo':
            bot.edit_message_caption(
                "‚úÖ <b>–†–µ–∂–∏–º: –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–∫—É–ø–∫—É</b>\n"
                f"–í–≤–µ–¥–∏—Ç–µ: <code>username –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ</code> ({MIN_QTY}‚Äì{MAX_QTY}).",
                cid, c.message.message_id, reply_markup=get_change_markup(cid), parse_mode='HTML'
            )
        else:
            bot.edit_message_text(
                "‚úÖ <b>–†–µ–∂–∏–º: –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–∫—É–ø–∫—É</b>\n"
                f"–í–≤–µ–¥–∏—Ç–µ: <code>username –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ</code> ({MIN_QTY}‚Äì{MAX_QTY}).",
                cid, c.message.message_id, parse_mode='HTML', reply_markup=get_change_markup(cid)
            )

    # –ê–¥–º–∏–Ω: –ª–∏—Å—Ç–∏–Ω–≥
    elif data in ("prev_page","next_page"):
        page = admin_page.get(cid, 0)
        if data == "prev_page" and page > 0:
            admin_page[cid] = page - 1
        elif data == "next_page":
            maxp = (len(db["permitted_users"]) - 1)//PAGE_SIZE
            if page < maxp:
                admin_page[cid] = page + 1
        send_list_page(cid, edit=True, message_id=c.message.message_id)

    elif data == "back_admin":
        bot.delete_message(cid, c.message.message_id)
        send_admin_menu(cid)
        admin_state[cid] = 'menu'

    elif data == "exit_admin":
        bot.delete_message(cid, c.message.message_id)
        bot.send_message(cid, "üîπ <b>–í—ã—Ö–æ–¥ –∏–∑ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.</b>",
                         parse_mode='HTML',
                         reply_markup=types.ReplyKeyboardRemove())
        admin_state.pop(cid, None)

    bot.answer_callback_query(c.id)


# ========== –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–¥–º–∏–Ω‚Äë–º–µ–Ω—é ==========
@bot.message_handler(func=lambda m: m.chat.id == ADMIN_ID and m.chat.id in admin_state)
def admin_menu_handler(msg):
    cid = msg.chat.id
    state = admin_state[cid]
    text  = msg.text.strip()

    if state == 'menu':
        if text == "–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è":
            admin_state[cid] = 'add'
            bot.send_message(cid, "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:")
        elif text == "–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è":
            admin_state[cid] = 'del'
            bot.send_message(cid, "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
        elif text == "–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π":
            admin_state[cid] = 'list'
            admin_page[cid] = 0
            send_list_page(cid)
        elif text == "–°–º–µ–Ω–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç":
            admin_state[cid] = 'change_contact'
            bot.send_message(cid, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:")
        elif text == "–í—ã—Ö–æ–¥":
            bot.send_message(cid, "üîπ <b>–í—ã—Ö–æ–¥ –∏–∑ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.</b>",
                             parse_mode='HTML',
                             reply_markup=types.ReplyKeyboardRemove())
            admin_state.pop(cid, None)

    elif state == 'add':
        if not text.isdigit():
            bot.send_message(cid, "‚ùó –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID.")
        else:
            uid = int(text)
            if uid in db["permitted_users"]:
                bot.send_message(cid, "‚ùó –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ.")
            else:
                db["permitted_users"].append(uid)
                save_db()
                bot.send_message(cid, f"‚úî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {uid} –¥–æ–±–∞–≤–ª–µ–Ω.")
            admin_state[cid] = 'menu'
            send_admin_menu(cid)

    elif state == 'del':
        if not text.isdigit():
            bot.send_message(cid, "‚ùó –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID.")
        else:
            uid = int(text)
            if uid not in db["permitted_users"]:
                bot.send_message(cid, "‚ùó –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            else:
                db["permitted_users"].remove(uid)
                save_db()
                bot.send_message(cid, f"‚úî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {uid} —É–¥–∞–ª—ë–Ω.")
            admin_state[cid] = 'menu'
            send_admin_menu(cid)

    elif state == 'change_contact':
        if not text.isdigit():
            bot.send_message(cid, "‚ùó –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID.")
        else:
            db["admin_contact"] = int(text)
            save_db()
            bot.send_message(cid, f"‚úî –ö–æ–Ω—Ç–∞–∫—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ–±–Ω–æ–≤–ª—ë–Ω: {text}")
            admin_state[cid] = 'menu'
            send_admin_menu(cid)


# ========== Inline‚Äë–∑–∞–ø—Ä–æ—Å—ã ==========
@bot.inline_handler(lambda q: True)
def inline_calc(q):
    query = q.query.strip()
    if not query.isdigit():
        return
    qty = int(query)
    if qty < MIN_QTY or qty > MAX_QTY:
        msg = f"–í–≤–µ–¥–∏—Ç–µ –æ—Ç {MIN_QTY} –¥–æ {MAX_QTY}"
    else:
        res = get_invoice(qty, DEFAULT_USERNAME)
        if res and res.get("message", {}).get("invoice"):
            inv = res["message"]["invoice"]
            price     = float(inv["amount"])
            per_star  = round(price/qty, 2)
            msg = (f"{qty} ‚≠ê = {price} {inv.get('currency','RUB')}\n"
                   f"{per_star} –∑–∞ ‚≠ê")
        else:
            msg = "–û—à–∏–±–∫–∞ —Ä–∞—Å—á—ë—Ç–∞"
    result = InlineQueryResultArticle(
        id=str(uuid.uuid4()),
        title=msg,
        input_message_content=InputTextMessageContent(msg, parse_mode='HTML')
    )
    bot.answer_inline_query(q.id, [result], cache_time=1)


# ========== –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π ==========
@bot.message_handler(func=lambda m: True)
def process_message(msg):
    cid = msg.chat.id

    # –ê–¥–º–∏–Ω‚Äë–º–µ–Ω—é –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≤—ã—à–µ
    if cid == ADMIN_ID and cid in admin_state:
        return

    if cid not in user_modes:
        send_mode_selection_menu(cid)
        return

    mode = user_modes[cid]
    text = msg.text.strip()
    waiting = bot.send_message(cid, "üîÑ –í—ã–ø–æ–ª–Ω—è—é –∑–∞–ø—Ä–æ—Å‚Ä¶")

    def valid_qty(s):
        return s.isdigit() and MIN_QTY <= int(s) <= MAX_QTY

    # ===== –†–∞—Å—á—ë—Ç —Ü–µ–Ω—ã =====
    if mode == "calc":
        if not valid_qty(text):
            bot.delete_message(cid, waiting.message_id)
            bot.send_message(cid, f"‚ùó –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç {MIN_QTY} –¥–æ {MAX_QTY}.",
                             reply_markup=get_change_markup(cid))
            return
        qty = int(text)
        res = get_invoice(qty, DEFAULT_USERNAME)
        bot.delete_message(cid, waiting.message_id)
        if not res or not res.get("message", {}).get("invoice"):
            bot.send_message(cid, "üö´ –û—à–∏–±–∫–∞ —Ä–∞—Å—á—ë—Ç–∞.", reply_markup=get_change_markup(cid))
            return

        inv      = res["message"]["invoice"]
        price    = float(inv["amount"])
        per_star = round(price/qty, 2)
        txt = (f"üí∞ –¶–µ–Ω–∞: <b>{price}</b> {inv.get('currency','RUB')} "
               f"(<i>{per_star}</i> –∑–∞ ‚≠ê)\n")

        if is_permitted(cid):
            rec     = round(price + random.uniform(5,10), 2)
            rec_per = round(rec/qty, 2)
            txt += (f"üîù –†–µ–∫–æ–º.: <b>{rec}</b> {inv.get('currency','RUB')} "
                    f"(<i>{rec_per}</i> –∑–∞ ‚≠ê)")
            bot.send_message(cid, txt, parse_mode='HTML', reply_markup=get_change_markup(cid))
        else:
            bot.send_message(cid, txt, parse_mode='HTML')

    # ===== –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–∫—É–ø–∫—É =====
    else:
        if not is_permitted(cid):
            bot.delete_message(cid, waiting.message_id)
            bot.send_message(cid, "‚ùó –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é –ø–æ–∫—É–ø–∫–∏.", parse_mode='HTML')
            return

        parts = text.split()
        if len(parts) != 2 or not valid_qty(parts[1]):
            bot.delete_message(cid, waiting.message_id)
            bot.send_message(
                cid,
                f"‚ùó –í–≤–µ–¥–∏—Ç–µ: <code>username –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ</code> ({MIN_QTY}‚Äì{MAX_QTY}).",
                parse_mode='HTML', reply_markup=get_change_markup(cid)
            )
            return

        username, qty_str = parts
        qty = int(qty_str)

        rec_info = get_recipient_info(username)
        if not rec_info or "detail" in rec_info:
            err = rec_info.get("detail", {}).get("error_message", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞.")
            bot.delete_message(cid, waiting.message_id)
            bot.send_message(
                cid,
                "<b>–û—à–∏–±–∫–∞</b>\n<blockquote expandable>"
                f"{err}"
                "</blockquote>",
                parse_mode='HTML', reply_markup=get_change_markup(cid)
            )
            return

        msg_data = rec_info["message"]
        name      = msg_data.get("name", "‚Äî")
        photo_html= msg_data.get("photo", "")
        photo_url = photo_html.split('src="')[1].split('"')[0] if 'src="' in photo_html else None

        inv_res = get_invoice(qty, username)
        bot.delete_message(cid, waiting.message_id)
        if not inv_res or not inv_res.get("message", {}).get("invoice"):
            bot.send_message(cid, "üö´ –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—á—ë—Ç–∞.", reply_markup=get_change_markup(cid))
            return

        inv      = inv_res["message"]["invoice"]
        price    = float(inv["amount"])
        per_star = round(price/qty, 2)
        rec      = round(price + random.uniform(5,10), 2)
        rec_per  = round(rec/qty, 2)
        pay_url  = inv.get("url", "")

        caption = (
            "<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b>\n"
            "<blockquote>"
            f"–ò–º—è: {name}\n"
            f"–Æ–∑–µ—Ä–Ω–µ–π–º: @{username}"
            "</blockquote>\n\n"
            f"üí∞ –¶–µ–Ω–∞: {price} {inv.get('currency','RUB')} (<i>{per_star}</i> –∑–∞ ‚≠ê)\n"
            f"üîù –†–µ–∫–æ–º.: {rec} {inv.get('currency','RUB')} (<i>{rec_per}</i> –∑–∞ ‚≠ê)\n\n"
            "üëâ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–û–ø–ª–∞—Ç–∏—Ç—å¬ª."
        )

        kb = types.InlineKeyboardMarkup(row_width=2)
        kb.add(
            types.InlineKeyboardButton("–û–ø–ª–∞—Ç–∏—Ç—å", url=pay_url),
            types.InlineKeyboardButton("–°–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º", callback_data="change_mode")
        )
        kb.add(types.InlineKeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", url=f"https://t.me/{username}"))

        if photo_url:
            try:
                r = requests.get(photo_url, headers=COMMON_HEADERS, timeout=10)
                r.raise_for_status()
                bio = io.BytesIO(r.content)
                bio.name = 'avatar.jpg'
                bot.send_photo(cid, photo=bio, caption=caption, parse_mode='HTML', reply_markup=kb)
            except Exception as e:
                bot.send_message(cid, caption, parse_mode='HTML', reply_markup=kb)
        else:
            bot.send_message(cid, caption, parse_mode='HTML', reply_markup=kb)


if __name__ == '__main__':
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    bot.infinity_polling()
